package DSA;

import java.util.ArrayList;
import java.util.List;

class Node<T, K>{
    T key;
    K value;
    Node<T, K> next;

    Node(T k, K v){
        this.key = k;
        this.value = v;
    }
}

public class HashTable<T, K> {
    private int size = 100;
    // Table spaces will be filled with Buckets(which is a linkedlist that contains nodes) for collision issue
    // (i.e when the same code is generated by hash function we use chaining for solving that problem)
    private Node<T, K>[] table;

    @SuppressWarnings("unchecked")
    HashTable() {
        // create an hashTable array of type Node 
        table = new Node[size];
        // Initialize each noe with null value;
        for (int i = 0; i < size; i++) {
            table[i] = null;
        }
    }

    private int hash(T key) {
        int hash = key.hashCode();
        // e.g hashCode / size == hashResult.
        return Math.abs(hash % size);
    }

    // "shuaibu" - "sadik" - "hassanah" - null - null - null.
    //     0           1          2         -     -       -
    //     0
    //     0   
    void insert(T key, K value) {
        int index = hash(key);

        Node<T, K> newNode = new Node<T, K>(key, value);

        if (table[index] == null) {
            table[index] = newNode;
        } else {
            Node<T, K> current = table[index];
            while (current.next != null) {
                current = current.next;
            }
            current.next = newNode;
        }
    }

    // "shuaibu" - "sadik" - "hassanah" - null - null - null.
    //     0           1          2         -     -       -
    //     0
    //     0   
    K get(T key) {
        int index = hash(key);
        Node<T, K> current = table[index];

        while (current != null) {
            if (current.key.equals(key)) {
                return current.value;
            }
            current = current.next;
        }

        throw new IllegalArgumentException("Key not found");
    }

    // "shuaibu" - "sadik" - "hassanah" - null - null - null.
    //     0           1          2         -     -       -
    //     0
    //     0        
    void delete(T key){
        int index = hash(key);
        Node<T, K> current = table[index];
        Node<T, K> prev = null;

        // here is just about linkedlist
        while (current.next != null) {
            // for hashmap lookup
            if (current.key.equals(key)) {
                if (prev == null) {
                    // If it's the first node in the bucket.
                    table[index] = current.next;
                } else {
                    prev.next = current.next;
                }
                return;
            }
            prev = current;
            current = current.next;
        }
        // If key is not found, do nothing or throw an exception
        throw new IllegalArgumentException("Key not found");
    }

    // "shuaibu" - "sadik" - "hassanah" - null - null - null.
    //     0           1          2         -     -       -
    //     0           1
    //     0           1
    boolean containsKey(T key) {
        int index = hash(key);
        Node<T, K> current = table[index];

        while (current != null) {
            if (current.key.equals(key)) {
                return true;
            }
            current = current.next;
        }
        return false;
    }

    // "shuaibu" - "sadik" - "hassanah" - null - null - null.
    //     0           1          2         -     -       -
    //     0           1
    //     0           1
    void update(T key, T newKey, K newValue) {
        int index = hash(key);
        Node<T, K> current = table[index];

        while (current != null) {
            if (current.key.equals(key)) {
                current.value = newValue;
                current.key = newKey;
                return;
            }
            current = current.next;
        }

        throw new IllegalArgumentException("Key not found");
    }
    // "shuaibu" - "sadik" - "hassanah" - null - null - null.
    //     0           1          2         -     -       -
    //     0           1
    //     0           1
    List<T> getAllKeys() {
        List<T> keys = new ArrayList<T>();

        for (int i = 0; i < size; i++) {
            Node<T, K> current = table[i];
            while (current != null) {
                keys.add(current.key);
                current = current.next;
            }
        }
        return keys;
    }

    // "shuaibu" - "sadik" - "hassanah" - null - null - null.
    //     0           1          2         -     -       -
    //     0           1
    //     0           1
    List<K> getAllValues() {
        List<K> keys = new ArrayList<K>();

        for (int i = 0; i < size; i++) {
            Node<T, K> current = table[i];
            while (current != null) {
                keys.add(current.value);
                current = current.next;
            }
        }
        return keys;
    }

    void display() {
        for (int i = 0; i < size; i++) {
            Node<T, K> current = table[i];

            while (current != null){
                System.out.println("'" + current.key + "': '" + current.value + "'");
                current = current.next;
            }
        }
    }

        // Get size operation
    public int size() {
        int count = 0;
            
        // Traverse each bucket
        for (int i = 0; i < size; i++) {
            Node<T, K> current = table[i];
            // Traverse the linked list at the bucket
            while (current != null) {
                count++;
                current = current.next;
            }
        }
        return count;
    }

            // Clear operation
    public void clear() {
        // Traverse each bucket
        for (int i = 0; i < size; i++) {
            table[i] = null;
        }
    }

    
    public static void main(String[] args) {
        HashTable<String, String> table = new HashTable<>();
        table.insert("shuaibu", "abba");
        table.insert("sadik", "habu");
        table.insert("sulaiman", "suly");
        table.insert("abdul", "audil");
        table.display();
        System.out.println("conatins status: " + table.containsKey("hassanah"));
        table.update("abdul", "khadeejah", "jije");
        table.display();
        System.out.println("Keys: " + table.getAllKeys());
        System.out.println("Values: " + table.getAllValues());
        System.out.println(table.size());
    }
}
